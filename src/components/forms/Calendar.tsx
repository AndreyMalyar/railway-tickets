import { useState } from "react";
import "./styleCalendar.scss";

const monthArr = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
];

const daysOfWeekArr = ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"];

interface CalendarProps {
    onDateSelect: (departDate: string, returnDate?: string) => void;
    selectedDate?: string;
    mode: 'single' | 'range'; // –æ–¥–Ω–∞ –¥–∞—Ç–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω
}


function Calendar({ onDateSelect, selectedDate, mode }: CalendarProps) {
    const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
    const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());


    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
    const [selectedDates, setSelectedDates] = useState({
        depart: '',
        return: ''
    });

    const [selectionStep, setSelectionStep] = useState<'depart' | 'return'>('depart');

    const handleDateClick = (dateString: string) => {
        if (mode === 'single') {
            onDateSelect(dateString); // —Ç–æ–ª—å–∫–æ –¥–ª—è single - —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        } else {
            // –¥–ª—è range mode - –ù–ï –≤—ã–∑—ã–≤–∞–µ–º onDateSelect, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (selectionStep === 'depart') {
                setSelectedDates(prev => ({ ...prev, depart: dateString }));
                setSelectionStep('return');
            } else {
                setSelectedDates(prev => ({ ...prev, return: dateString }));
                // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º onDateSelect –∑–¥–µ—Å—å!
            }
        }
    };

    const handleApply = () => {
        if (mode === 'range') {
            onDateSelect(selectedDates.depart, selectedDates.return); // –¢–û–õ–¨–ö–û –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º
        }
    };

    const handleReset = () => {
        setSelectedDates({ depart: '', return: '' });
        setSelectionStep('depart');
    };

    const generateDays = (year: number, month: number) => {

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü –µ—Å–ª–∏ –±–æ–ª—å—à–µ 11
        let adjustedYear = year;
        let adjustedMonth = month;

        if (month > 11) {
            adjustedYear = year + Math.floor(month / 12);
            adjustedMonth = month % 12;
        }

        const days = [];
        const firstDayOfMonth = new Date(adjustedYear, adjustedMonth, 1).getDay();
        const correctedFirstDay = (firstDayOfMonth === 0) ? 6 : firstDayOfMonth - 1; // –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0
        const lastDayOfMonth = new Date(adjustedYear, adjustedMonth + 1, 0).getDate();
        const lastDayOfPrevMonth = new Date(adjustedYear, adjustedMonth, 0).getDate();

        // –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        for (let i = correctedFirstDay; i > 0; i--) {
            days.push(
                <div key={`prev-${adjustedMonth}-${lastDayOfPrevMonth - i + 1}`} className="calendar__day calendar__day--passive">
                    {lastDayOfPrevMonth - i + 1}
                </div>
            );
        }

        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        for (let day = 1; day <= lastDayOfMonth; day++) {
            const dateString = `${adjustedYear}-${(adjustedMonth + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;

            const isSelected = selectedDates.depart === dateString || selectedDates.return === dateString;

            days.push(
                <div
                    key={`${adjustedMonth}-${day}`}
                    className={`calendar__day calendar__day--active ${isSelected ? 'calendar__day--selected' : ''}`}
                    onClick={() => handleDateClick(dateString)}
                >
                    {day}
                </div>
            );
        }

        return days;
    };

    const prevMonth = () => {
        if (currentMonth === 0) {
            setCurrentMonth(11);
            setCurrentYear(currentYear - 1);
        } else {
            setCurrentMonth(currentMonth - 1);
        }
    };

    const nextMonth = () => {
        if (currentMonth === 11) {
            setCurrentMonth(0);
            setCurrentYear(currentYear + 1);
        } else {
            setCurrentMonth(currentMonth + 1);
        }
    }

    return (
        <div className="calendar">
            {/* –ü–æ–ª—è –¥–ª—è –¥–∞—Ç —Å–≤–µ—Ä—Ö—É */}
            <div className="calendar__inputs">
                <div className={`calendar__input ${selectionStep === 'depart' ? 'calendar__input--active' : ''}`}>
                    <span className="calendar__icon">üìÖ</span>
                    <span>{selectedDates.depart || 'Depart'}</span>
                </div>
                <div className={`calendar__input ${selectionStep === 'return' ? 'calendar__input--active' : ''}`}>
                    <span className="calendar__icon">üìÖ</span>
                    <span>{selectedDates.return || 'Return'}</span>
                </div>
            </div>

            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π */}
            <div className="calendar__header">
                <button onClick={prevMonth}>‚Üê</button>
                <div className="calendar__months-titles">
                    <span>{monthArr[currentMonth]} {currentYear}</span>
                    <span>{monthArr[(currentMonth + 1) % 12]} {currentMonth === 11 ? currentYear + 1 : currentYear}</span>
                </div>
                <button onClick={nextMonth}>‚Üí</button>
            </div>

            {/* –î–≤–∞ –º–µ—Å—è—Ü–∞ —Ä—è–¥–æ–º */}
            <div className="calendar__months">
                {/* –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü */}
                <div className="calendar__month">
                    <div className="calendar__days-of-week">
                        {daysOfWeekArr.map(day => (
                            <div key={day} className="calendar__day-of-week">
                                {day}
                            </div>
                        ))}
                    </div>
                    <div className="calendar__body">
                        {generateDays(currentYear, currentMonth)}
                    </div>
                </div>

                {/* –í—Ç–æ—Ä–æ–π –º–µ—Å—è—Ü */}
                <div className="calendar__month">
                    <div className="calendar__days-of-week">
                        {daysOfWeekArr.map(day => (
                            <div key={`next-${day}`} className="calendar__day-of-week">
                                {day}
                            </div>
                        ))}
                    </div>
                    <div className="calendar__body">
                        {generateDays(currentYear, currentMonth + 1)}
                    </div>
                </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ */}
            <div className="calendar__actions">
                <button className="calendar__reset" onClick={handleReset}>Reset</button>
                <button className="calendar__apply" onClick={handleApply}>Apply</button>
            </div>
        </div>
    )
}

export default Calendar